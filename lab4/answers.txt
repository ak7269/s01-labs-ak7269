Name: Anshika Kapoor
net ID: ak7269
NYU ID(N#): N16757402

Collaborators (who you talked to about the lab, what you talked about):


Source material that you consulted:


Other acknowledgments:


How long did this lab take you?
12 days

Anything else you'd like us to know: 


Extra credit exercise(s) (describe what you coded):

Exercise 6: Written in comment form. In the fork() function, inside the for loop that is copying data, I tried to check if the virtuala variable was equal to the code page and then further checked if it was not a free page. If these conditions satisfied then I am incrementing the refcount and mapping the physical address of the parent to virtual adress of child with the help of virtual_memory_map. I increment the refcount to satsify the condition in the question that the refcount must be equal to the number of times pn is mapped in process page tables.
 
Exercise 7: I have written out the code for the sys_exit function. In this fucntion firstly run a while loop till the MEMSIZE_VIRTUAL that has the goal of running through the kernel page table and freeing all the memory that it contains. In the while loop I check if the page belongs the process by checking if the owner of the page is the same as the owner argument passed in the sys_exit function. If it belongs then then I free the page by assigning the refcount of the page to 0 and the owner to PO_FREE. Next I check if the virtuala variable is equal to the PROC_START_ADDR and if it has a refcount greater than equal to 2 and if its owner is greater than equal to 1. PROC_START_ADDR is the only shared page between all the processes and is responsible for storing the code segment of a process. If the if condtion is satisfied I decrement or decrease the refcount of this shared page. After the while loop ends I change the p_state of the process and declare it free. This sys_exit function is called in the fork function at places such as if the pagetable of a process is invalid and if the freepagefound variable is invalid. 

